#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from nav2_msgs.action import NavigateToPose
from rclpy.action import ActionClient

class WaypointNavigator(Node):

    def __init__(self):
        super().__init__('waypoint_navigator')
        self.nav_to_pose_client = ActionClient(self, NavigateToPose, 'navigate_to_pose')
        self.waypoints = [
            {'x': 1.0, 'y': 1.0},
            {'x': 2.0, 'y': 2.0},
            {'x': 0.0, 'y': 2.0},
            {'x': 0.0, 'y': 0.0}
        ]
        self.current_waypoint = 0

    def navigate_to_waypoint(self):
        goal_msg = NavigateToPose.Goal()
        goal_msg.pose.header.frame_id = 'map'
        goal_msg.pose.header.stamp = self.get_clock().now().to_msg()
        goal_msg.pose.pose.position.x = self.waypoints[self.current_waypoint]['x']
        goal_msg.pose.pose.position.y = self.waypoints[self.current_waypoint]['y']
        goal_msg.pose.pose.orientation.w = 1.0

        self.nav_to_pose_client.wait_for_server()
        self.get_logger().info(f'Navigating to waypoint {self.current_waypoint}')
        future = self.nav_to_pose_client.send_goal_async(goal_msg)
        future.add_done_callback(self.goal_response_callback)

    def goal_response_callback(self, future):
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().info('Goal rejected')
            return

        self.get_logger().info('Goal accepted')
        result_future = goal_handle.get_result_async()
        result_future.add_done_callback(self.get_result_callback)

    def get_result_callback(self, future):
        result = future.result().result
        self.get_logger().info('Navigation finished')
        self.current_waypoint = (self.current_waypoint + 1) % len(self.waypoints)
        self.navigate_to_waypoint()

def main(args=None):
    print("STARTING PROGRAM")
    rclpy.init(args=args)
    navigator = WaypointNavigator()
    navigator.navigate_to_waypoint()
    rclpy.spin(navigator)
    navigator.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
